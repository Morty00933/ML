name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build & push images to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io

    outputs:
      # эти outputs понадобятся job'у deploy
      registry_base: ${{ steps.vars.outputs.registry_base }}
      sha_tag: ${{ steps.vars.outputs.sha_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Compute vars (lowercased owner, tags)
        id: vars
        run: |
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lc=${OWNER_LC}" >> $GITHUB_OUTPUT
          echo "sha_tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "registry_base=${{ env.REGISTRY }}/${OWNER_LC}/mini-ml" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- API ----------
      - name: Docker meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.registry_base }}-api
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.vars.outputs.sha_tag }}
            type=ref,event=branch
            type=sha

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./services/api
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Inference ----------
      - name: Docker meta (Inference)
        id: meta_inf
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.registry_base }}-inference
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.vars.outputs.sha_tag }}
            type=ref,event=branch
            type=sha

      - name: Build & push Inference
        uses: docker/build-push-action@v6
        with:
          context: ./services/inference
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta_inf.outputs.tags }}
          labels: ${{ steps.meta_inf.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- (опционально) Training ----------
      - name: Docker meta (Training)
        id: meta_train
        if: hashFiles('services/training/Dockerfile') != ''
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.registry_base }}-training
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.vars.outputs.sha_tag }}
            type=ref,event=branch
            type=sha

      - name: Build & push Training
        if: hashFiles('services/training/Dockerfile') != ''
        uses: docker/build-push-action@v6
        with:
          context: ./services/training
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta_train.outputs.tags }}
          labels: ${{ steps.meta_train.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- (опционально) MLflow ----------
      - name: Docker meta (MLflow)
        id: meta_mlflow
        if: hashFiles('services/mlflow/Dockerfile') != ''
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.registry_base }}-mlflow
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.vars.outputs.sha_tag }}

      - name: Build & push MLflow
        if: hashFiles('services/mlflow/Dockerfile') != ''
        uses: docker/build-push-action@v6
        with:
          context: ./services/mlflow
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta_mlflow.outputs.tags }}
          labels: ${{ steps.meta_mlflow.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes (Helm)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && secrets.KUBE_CONFIG_BASE64 != '' }}
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Write kubeconfig
        run: |
          echo "${KUBE_CONFIG_BASE64}" | base64 -d > $HOME/.kube/config
        env:
          KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.4'

      - name: Create/Update imagePullSecret for GHCR
        run: |
          kubectl create namespace ml --dry-run=client -o yaml | kubectl apply -f -
          kubectl delete secret ghcr-cred -n ml --ignore-not-found
          kubectl create secret docker-registry ghcr-cred \
            --docker-server=ghcr.io \
            --docker-username="${GHCR_USERNAME}" \
            --docker-password="${GHCR_TOKEN}" \
            -n ml
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

      - name: Helm upgrade/install
        run: |
          REGISTRY_BASE="${{ needs.build-and-push.outputs.registry_base }}"
          SHA_TAG="${{ needs.build-and-push.outputs.sha_tag }}"
          helm upgrade --install mini-ml ./infra/helm/mini-ml \
            --namespace ml \
            --set image.registry="${REGISTRY_BASE}" \
            --set image.api_tag="${SHA_TAG}" \
            --set image.inference_tag="${SHA_TAG}" \
            --set-string api.imagePullSecrets[0].name=ghcr-cred \
            --set-string inference.imagePullSecrets[0].name=ghcr-cred
