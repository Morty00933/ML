name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Lowercase owner
        id: prep
        run: echo "owner_lc=${OWNER,,}" >> "$GITHUB_OUTPUT"
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---- Lint Dockerfiles (simple hadolint via container)
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          dockerfile: |
            services/api/Dockerfile
            services/training/Dockerfile
            services/inference/Dockerfile

      # ---- Build & push: API
      - name: Docker meta (api)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.owner_lc }}/mini-ml-api
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      - name: Build & push (api)
        uses: docker/build-push-action@v6
        with:
          context: ./services/api
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}

      # ---- Build & push: training
      - name: Docker meta (training)
        id: meta_train
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.owner_lc }}/mini-ml-training
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      - name: Build & push (training)
        uses: docker/build-push-action@v6
        with:
          context: ./services/training
          push: true
          tags: ${{ steps.meta_train.outputs.tags }}
          labels: ${{ steps.meta_train.outputs.labels }}

      # ---- Build & push: inference
      - name: Docker meta (inference)
        id: meta_inf
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.owner_lc }}/mini-ml-inference
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest

      - name: Build & push (inference)
        uses: docker/build-push-action@v6
        with:
          context: ./services/inference
          push: true
          tags: ${{ steps.meta_inf.outputs.tags }}
          labels: ${{ steps.meta_inf.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    # На уровне job оставляем только ветку (env/secrets тут использовать нельзя)
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: read
    env:
      REGISTRY: ghcr.io
      OWNER_LC: ${{ github.repository_owner }}
      KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      HELM_RELEASE: ${{ secrets.HELM_RELEASE }}
    steps:
      - uses: actions/checkout@v4

      - name: Helm lint
        uses: azure/setup-helm@v4
      - name: Lint chart
        run: helm lint ./infra/helm/mini-ml

      # ---- Gate: проверяем, что секрет есть (делаем это в шаге, не в job.if)
      - name: Gate deploy (check KUBE_CONFIG_BASE64)
        id: gate
        run: |
          if [ -z "${KUBE_CONFIG_BASE64:-}" ]; then
            echo "missing=1" >> "$GITHUB_OUTPUT"
            echo "KUBE_CONFIG_BASE64 is empty. Skipping deploy."
          else
            echo "missing=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare kubeconfig
        if: ${{ steps.gate.outputs.missing == '0' }}
        run: |
          echo "$KUBE_CONFIG_BASE64" | base64 -d > "$HOME/kubeconfig"
          echo "KUBECONFIG=$HOME/kubeconfig" >> "$GITHUB_ENV"

      - name: Show cluster info
        if: ${{ steps.gate.outputs.missing == '0' }}
        run: |
          kubectl --kubeconfig "$KUBECONFIG" cluster-info
          kubectl --kubeconfig "$KUBECONFIG" get ns

      - name: Ensure namespace
        if: ${{ steps.gate.outputs.missing == '0' }}
        run: |
          kubectl --kubeconfig "$KUBECONFIG" get ns "$K8S_NAMESPACE" || \
          kubectl --kubeconfig "$KUBECONFIG" create ns "$K8S_NAMESPACE"

      - name: Helm upgrade/install
        if: ${{ steps.gate.outputs.missing == '0' }}
        run: |
          OWNER_LC="${{ env.OWNER_LC,, }}"
          helm upgrade --install "${HELM_RELEASE}" ./infra/helm/mini-ml \
            --namespace "$K8S_NAMESPACE" \
            --set image.registry="${REGISTRY}/${OWNER_LC}" \
            --set image.api_tag=latest \
            --set image.training_tag=latest \
            --set image.inference_tag=latest
