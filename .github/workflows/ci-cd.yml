name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@v4

      # Приводим owner к нижнему регистру
      - name: Prepare lowercase owner
        id: prep
        run: echo "owner_lc=${OWNER,,}" >> "$GITHUB_OUTPUT"
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ----- API image -----
      - name: Docker meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.owner_lc }}/mini-ml-api
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./services/api
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}

      # ----- Inference image -----
      - name: Docker meta (Inference)
        id: meta_inf
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.owner_lc }}/mini-ml-inference
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=sha

      - name: Build & push Inference
        uses: docker/build-push-action@v6
        with:
          context: ./services/inference
          push: true
          tags: ${{ steps.meta_inf.outputs.tags }}
          labels: ${{ steps.meta_inf.outputs.labels }}

  deploy:
    # деплой возможен только после успешной сборки
    needs: build-and-push
    runs-on: ubuntu-latest

    # Прокидываем секреты в env и проверяем ИХ, а не secrets.*
    env:
      KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
      HELM_RELEASE: ${{ secrets.HELM_RELEASE }}
      OWNER_LC: ${{ github.repository_owner }}
      REGISTRY: ghcr.io

    # Условие деплоя: ветка main И передан kubeconfig
    if: ${{ github.ref == 'refs/heads/main' && env.KUBE_CONFIG_BASE64 != '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Lowercase owner
        id: prep
        run: echo "owner_lc=${OWNER,,}" >> "$GITHUB_OUTPUT"
        env:
          OWNER: ${{ env.OWNER_LC }}

      - name: Prepare kubeconfig
        run: |
          echo "$KUBE_CONFIG_BASE64" | base64 -d > $HOME/kubeconfig
          echo "KUBECONFIG=$HOME/kubeconfig" >> $GITHUB_ENV

      - name: Show cluster info (optional)
        run: |
          kubectl --kubeconfig "$KUBECONFIG" cluster-info
          kubectl --kubeconfig "$KUBECONFIG" get ns

      - name: Create namespace if not exists
        run: |
          kubectl --kubeconfig "$KUBECONFIG" get ns "$K8S_NAMESPACE" || \
          kubectl --kubeconfig "$KUBECONFIG" create ns "$K8S_NAMESPACE"

      # Если образы приватные — нужен imagePullSecret (разово в кластере).
      # Секрет здесь не создаем, считаем что уже есть (например, 'ghcr-secret').
      # Иначе этот шаг можно добавить.

      - name: Helm upgrade/install
        run: |
          OWNER_LC="${{ steps.prep.outputs.owner_lc }}"
          helm upgrade --install "${HELM_RELEASE}" ./infra/helm/mini-ml \
            --namespace "$K8S_NAMESPACE" \
            --set image.registry="${REGISTRY}/${OWNER_LC}" \
            --set image.api_tag=latest \
            --set image.inference_tag=latest
